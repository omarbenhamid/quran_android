apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion deps.android.build.compileSdkVersion

  lintOptions {
    checkReleaseBuilds true
    lintConfig file("lint.xml")
    enable "Interoperability"
  }

  defaultConfig {
    minSdkVersion deps.android.build.minSdkVersion
    targetSdkVersion deps.android.build.targetSdkVersion
    versionCode 2951
    versionName "2.9.5-p1"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    release {
      storeFile file(STORE_FILE)
      storePassword STORE_PASSWORD
      keyAlias KEY_ALIAS
      keyPassword KEY_PASSWORD
    }
  }

  flavorDimensions "pageType"
  productFlavors {
    madani {
      applicationId "com.quran.labs.androidquran"
    }
  }

  buildTypes {
    beta {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.cfg'
      signingConfig signingConfigs.release
      versionNameSuffix "-beta"
      if (project.hasProperty('disableCrashlytics')) {
        ext.enableCrashlytics = false
      }
      matchingFallbacks = ['debug']
    }

    debug {
      ext.enableCrashlytics = false
      ext.alwaysUpdateBuildId = false
      applicationIdSuffix ".debug"
      versionNameSuffix "-debug"
    }

    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.cfg'
      signingConfig signingConfigs.release
      if (project.hasProperty('disableCrashlytics')) {
        ext.enableCrashlytics = false
      }
    }
  }

  applicationVariants.all { variant ->
    resValue "string", "authority", applicationId + '.data.QuranDataProvider'
    resValue "string", "file_authority", applicationId + '.fileprovider'
    if (applicationId.endsWith("debug")) {
      mergedFlavor.manifestPlaceholders = [app_debug_label: "Quran " + flavorName.capitalize()]
    }
  }

  androidExtensions {
    experimental = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      outputs.upToDateWhen { false }
      showStandardStreams true
      exceptionFormat "full"
    }
  }
  androidExtensions {
    experimental = true
  }
}

// required so that Errorprone doesn't look at generated files
afterEvaluate {
  tasks.withType(JavaCompile).configureEach {
    options.errorprone.excludedPaths = ".*/build/generated/.*"
    options.errorprone.disableWarningsInGeneratedCode = true
  }
}

if (new File(rootDir, 'extras/extras.gradle').exists()) {
   apply from: new File(rootDir, 'extras/extras.gradle')
} else {
   apply from: 'pluggable.gradle'
}

dependencies {
  implementation project(path: ':common:data')
  implementation project(path: ':common:networking')
  implementation project(path: ':common:pages')
  implementation project(path: ':common:search')

  implementation deps.kotlin.stdlib
  implementation "androidx.appcompat:appcompat:${androidxAppcompatVersion}"
  implementation "androidx.media:media:${androidxMediaVersion}"
  implementation "androidx.preference:preference:${androidxPreferencesVersion}"
  implementation "androidx.recyclerview:recyclerview:${androidxRecyclerViewVersion}"
  implementation "com.google.android.material:material:${materialComponentsVersion}"
  implementation 'io.reactivex.rxjava2:rxjava:2.2.14'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

  kapt deps.dagger.apt
  implementation deps.dagger.runtime

  implementation "com.squareup.okio:okio:2.4.1"
  implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
  implementation 'com.squareup.moshi:moshi:1.9.2'
  kapt("com.squareup.moshi:moshi-kotlin-codegen:1.9.2")

  implementation 'com.jakewharton.timber:timber:4.7.1'
  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-3'
  testImplementation 'junit:junit:4.12'
  testImplementation 'com.google.truth:truth:1.0'
  testImplementation "org.mockito:mockito-core:3.1.0"
  testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
  androidTestImplementation "androidx.test.espresso:espresso-core:${espressoVersion}"
  androidTestImplementation "androidx.test.espresso:espresso-intents:${espressoVersion}"
  implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

  implementation "androidx.room:room-runtime:2.2.2"
  kapt "androidx.room:room-compiler:2.2.2" // For Kotlin use kapt instead of annotationProcessor
  testImplementation "androidx.room:room-testing:2.2.2"

  errorprone 'com.google.errorprone:error_prone_core:2.3.3'
  //noinspection GradleDynamicVersion
  errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")


}
